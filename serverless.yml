# serverless.yml
org: cadesalaberry
app: api-swipe-me

frameworkVersion: ^2.13.0
useDotenv: true

service: api-swipe-me

# Create an optimized package for our functions
package:
  individually: true

plugins:
  - serverless-s3-remover
  - serverless-domain-manager
  - serverless-webpack # should be before dynamodb and offline
  - serverless-finch # should be before dynamodb and offline
  - serverless-dynamodb-local
  - serverless-offline  # should be last in list
  - offline-invalidate # HACK: invalidate cache in dev to support serverless hot-reload

custom:
  remover:
     buckets:
       - ${self:custom.client.bucketName}
  client:
    bucketName: ${self:custom.computed.s3Name}.swipeme.io
    distributionFolder: packages/client/dist
    manageResources: false # make sure we use the s3 created by cloudfront and not a new one
  webpack:
    packager: yarn
    webpackConfig: ./webpack.config.js
    includeModules:
        forceInclude:
          # - @swipeme.io/client
          # - @swipeme.io/common
          - aws-sdk
          - aws-serverless-express
          - body-parser
          - cors
          - express
          - http-status
          - tiny-async-pool
          - uuid
  customDomain:
    domainName: api.swipeme.io
    stage: ${self:custom.stage}
    basePath: ${self:custom.stage}
    certificateName: api.swipeme.io
    createRoute53Record: true
    endpointType: 'regional'
    securityPolicy: tls_1_2
  stage: ${opt:stage, 'local'}
  computed: ${file(./packages/api/config.js)}
  cognito:
    identity-pool: swipeme_io_${self:custom.computed.snakedStage}_id_pool
    user-pool: swipeme.io-${self:custom.stage}-user-pool
    user-pool-client: swipeme.io-${self:custom.stage}-user-pool-client
    # https://swipeme-io-local.auth.eu-west-1.amazoncognito.com/
    user-pool-subdomain: swipeme-io-${self:custom.computed.s3Name}
    user-pool-domain: ${self:custom.cognito.user-pool-subdomain}.auth.${self:provider.region}.amazoncognito.com
    # Defaults to 'http://localhost:8080/'
    user-pool-redirect-url: ${self:custom.computed.appDomainUrl}
    google-client-id: ${env:SWIPE_ME_SSO_GOOGLE_CLIENT_ID}
    google-client-secret: ${env:SWIPE_ME_SSO_GOOGLE_CLIENT_SECRET}
  tables:
    decks: decks-table-${self:custom.stage}
    single: single-table-${self:custom.stage}
  endpoints:
    dynamodb-url: 'http://localhost:8000'
  dynamodb:
    start:
      migrate: true
      seed: true
    stages:
      - ${self:custom.stage}
    seed:
      development:
        sources:
          - table: ${self:custom.tables.decks}
            sources: [./packages/api/seeds/decks.json]
          - table: ${self:custom.tables.single}
            sources: [./packages/api/seeds/single.json]

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${self:custom.stage}
  region: eu-west-1
  apiGateway:
    shouldStartNameWithService: true # https://www.serverless.com/framework/docs/deprecations/#AWS_API_GATEWAY_NAME_STARTING_WITH_SERVICE
    minimumCompressionSize: 1024 # Enable gzip compression for responses > 1 KB

  iamRoleStatementsName:
    Fn::Join:
      - '-'
      - - ${self:service}
        - ${self:custom.computed.shortStageName}
        - ${self:provider.region}
        - 'lambdaRole'

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - { "Fn::GetAtt": ["DecksDynamoDBTable", "Arn"] }
        - { "Fn::GetAtt": ["SingleDynamoDBTable", "Arn"] }
    - Effect: Allow
      Action:
        - 'cognito-idp:AdminUpdateUserAttributes' # To update username
        - 'cognito-idp:AdminGetUser' # To get user attributes
      Resource:
        - { "Fn::GetAtt": ["CognitoUserPool", "Arn"] }

  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    AWS_USER_POOL_ID: !Ref CognitoUserPool
    AWS_IDENTITY_POOL_ID: !Ref CognitoIdentityPool
    AWS_USER_POOL_CLIENT_ID: !Ref CognitoUserPoolClient
    AWS_USER_POOL_DOMAIN: ${self:custom.cognito.user-pool-domain}
    AWS_USER_POOL_REDIRECT_URL: ${self:custom.cognito.user-pool-redirect-url}
    AWS_COGNITO_REGION: ${self:provider.region}
    AWS_S3_REGION: ${self:provider.region}
    AWS_S3_BUCKET: !Ref S3Bucket
    STAGE: ${self:custom.stage}
    USERNAME_ZERO: cadesalaberry
    DECKS_TABLE: ${self:custom.tables.decks}
    SINGLE_TABLE: ${self:custom.tables.single}
    DYNAMODB_ENDPOINT: ${self:custom.endpoints.dynamodb-url}
    NODE_ENV: ${env:NODE_ENV, 'production'}

functions:
  app:
    name: api-swipe-me-${self:custom.computed.functionName}-app
    handler: packages/api/src/index.handler
    events:
      - http:
          path: /
          method: GET
          cors: true
      - http:
          path: /config.json
          method: GET
          cors: true
      - http:
          path: /users/username
          method: POST
          cors: true
      - http:
          path: /decks
          method: POST
          cors: true
      - http:
          path: /decks
          method: GET
          cors: true
      - http:
          path: /decks/{userHandle}/{deckHandle}
          method: GET
          cors: true

# Create our resources with separate CloudFormation templates
resources:
  # API Gateway Errors
  - ${file(resources/api-gateway-errors.yml)}
  # DynamoDB
  - ${file(resources/dynamodb-tables.yml)}
  # S3
  - ${file(resources/s3-bucket.yml)}
  # Cognito
  - ${file(resources/cognito-user-pool.yml)}
  - ${file(resources/cognito-identity-pool.yml)}
  - ${file(resources/cloudfront.yml)}
