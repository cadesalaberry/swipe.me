# serverless.yml
org: cadesalaberry
app: api-swipe-me

service: api-swipe-me

# Create an optimized package for our functions
package:
  individually: true

plugins:
  - serverless-domain-manager
  - serverless-plugin-typescript # should be before dynamodb and offline
  - serverless-dynamodb-local
  - serverless-offline  # should be last in list

custom:
  customDomain:
    domainName: dev.swipeme.io
    stage: ${self:custom.stage}
    basePath: api
    certificateName: dev.swipeme.io
    createRoute53Record: true
    endpointType: 'regional'
    securityPolicy: tls_1_2
  stage: ${opt:stage, 'dev'}
  cognito:
    identity-pool: eu-west-1:4e22e863-ff0a-436d-8c3c-f9484ce82994
    user-pool: eu-west-1_maZXR6XzU
    user-pool-client: 4ldbtdjcott19onil1ndjh1ei0
  s3:
    name: swipeme.io-dev
  tables:
    users: users-table-${self:custom.stage}
    decks: decks-table-${self:custom.stage}
  endpoints:
    dynamodb-url: 'http://localhost:8000'
  dynamodb:
    start:
      migrate: true
      seed: true
    stages:
      - ${self:custom.stage}
    seed:
      development:
        sources:
          - table: ${self:custom.tables.users}
            sources: [./seeds/users.json]
          - table: ${self:custom.tables.decks}
            sources: [./seeds/decks.json]

provider:
  name: aws
  runtime: nodejs10.x
  stage: ${self:custom.stage}
  region: eu-west-1

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - { "Fn::GetAtt": ["UsersDynamoDBTable", "Arn"] }
        - { "Fn::GetAtt": ["DecksDynamoDBTable", "Arn"] }

  environment:
    USERS_TABLE: ${self:custom.tables.users}
    DECKS_TABLE: ${self:custom.tables.decks}
    DYNAMODB_ENDPOINT: ${self:custom.endpoints.dynamodb-url}
    NODE_ENV: ${env:NODE_ENV, 'production'}

functions:
  app:
    handler: index.handler
    events:
      - http: ANY /
      - http: "ANY {proxy+}"

# Create our resources with separate CloudFormation templates
resources:
  # API Gateway Errors
  - ${file(resources/api-gateway-errors.yml)}
  # DynamoDB
  - ${file(resources/dynamodb-tables.yml)}
  # S3
  - ${file(resources/s3-bucket.yml)}
  # Cognito
  - ${file(resources/cognito-user-pool.yml)}
  - ${file(resources/cognito-identity-pool.yml)}
